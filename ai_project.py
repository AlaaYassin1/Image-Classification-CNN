# -*- coding: utf-8 -*-
"""AI_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zTpK2_SgmupboDB6ewsixvOwtKTVpeSf
"""

import numpy as np
import tensorflow as tf
from tensorflow import keras
import tensorflow_datasets as tfds
import matplotlib.pyplot as plt

(train_ds, test_ds), info = tfds.load(
    'rock_paper_scissors',
    split=['train', 'test'],
    as_supervised=True,
    with_info=True
)

def preprocess_data(images, labels):
    images = tf.image.rgb_to_grayscale(images)
    images = tf.image.resize(images, [150, 150])
    images = images / 255.0
    return images, labels

train_ds = train_ds.map(preprocess_data).batch(32).prefetch(tf.data.AUTOTUNE)
test_ds = test_ds.map(preprocess_data).batch(32).prefetch(tf.data.AUTOTUNE)

model = keras.Sequential([
    keras.layers.Conv2D(64, 3, activation='relu',input_shape=(150,150,1)),
    keras.layers.MaxPooling2D(2,2),
    keras.layers.Conv2D(64,3,activation='relu'),
    keras.layers.MaxPooling2D(2,2),
    keras.layers.Flatten(),
    keras.layers.Dense(128,activation='relu'),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(64,activation='relu'),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(3,activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history= model.fit(train_ds, epochs=10, validation_data=test_ds)

test_loss, test_accuracy=model.evaluate(test_ds)
print(f"دقة النموذج على بيانات الاختبار : {test_accuracy *100:.2f}%")

model.save('rock_paper_scissor.h5')

plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()